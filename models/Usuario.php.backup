<?php
class Usuario {
    private $conn;
    private $table = "usuarios";
    
    // Propiedades definidas explícitamente (PHP 8.2+)
    public $id;
    public $tipo_usuario;
    public $nombre;
    public $email;
    public $telefono;
    public $direccion;
    public $oni;
    public $dui;
    public $token_temporal;
    public $es_menor_edad;
    public $tutor_nombre;
    public $tutor_contacto;
    public $tutor_dui;
    public $acceso_temporal;
    public $fecha_inicio_acceso;
    public $fecha_expira_acceso;
    public $puede_prestar;
    public $dias_max_prestamo;
    public $max_libros_simultaneos;
    public $password;
    public $fecha_registro;
    public $ultimo_acceso;
    public $estado;
    
    // Constructor
    public function __construct($db) {
        $this->conn = $db;
    }
    
    // Crear usuario
    public function crear() {
        $query = "INSERT INTO " . $this->table . " 
                  SET tipo_usuario = :tipo_usuario,
                      nombre = :nombre,
                      email = :email,
                      telefono = :telefono,
                      direccion = :direccion,
                      oni = :oni,
                      dui = :dui,
                      password = :password,
                      estado = :estado";
        
        $stmt = $this->conn->prepare($query);
        
        // Limpiar datos
        $this->tipo_usuario = htmlspecialchars(strip_tags($this->tipo_usuario ?? 'estudiante_mayor'));
        $this->nombre = htmlspecialchars(strip_tags($this->nombre));
        $this->email = htmlspecialchars(strip_tags($this->email ?? ''));
        $this->telefono = htmlspecialchars(strip_tags($this->telefono ?? ''));
        $this->direccion = htmlspecialchars(strip_tags($this->direccion ?? ''));
        $this->oni = htmlspecialchars(strip_tags($this->oni ?? null));
        $this->dui = htmlspecialchars(strip_tags($this->dui ?? null));
        $this->estado = htmlspecialchars(strip_tags($this->estado ?? 'activo'));
        
        // Encriptar password
        $this->password = password_hash($this->password, PASSWORD_BCRYPT);
        
        // Bind
        $stmt->bindParam(":tipo_usuario", $this->tipo_usuario);
        $stmt->bindParam(":nombre", $this->nombre);
        $stmt->bindParam(":email", $this->email);
        $stmt->bindParam(":telefono", $this->telefono);
        $stmt->bindParam(":direccion", $this->direccion);
        $stmt->bindParam(":oni", $this->oni);
        $stmt->bindParam(":dui", $this->dui);
        $stmt->bindParam(":password", $this->password);
        $stmt->bindParam(":estado", $this->estado);
        
        if ($stmt->execute()) {
            return true;
        }
        return false;
    }
    
    // Leer todos los usuarios
    public function leer() {
        $query = "SELECT * FROM " . $this->table . " ORDER BY fecha_registro DESC";
        $stmt = $this->conn->prepare($query);
        $stmt->execute();
        return $stmt;
    }
    
    // Leer un usuario
    public function leerUno() {
        $query = "SELECT * FROM " . $this->table . " WHERE id = ? LIMIT 1";
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(1, $this->id);
        $stmt->execute();
        
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($row) {
            $this->tipo_usuario = $row['tipo_usuario'];
            $this->nombre = $row['nombre'];
            $this->email = $row['email'];
            $this->telefono = $row['telefono'];
            $this->direccion = $row['direccion'];
            $this->oni = $row['oni'];
            $this->dui = $row['dui'];
            $this->estado = $row['estado'];
            $this->fecha_registro = $row['fecha_registro'];
            return true;
        }
        return false;
    }
    
    // Actualizar usuario
    public function actualizar() {
        $query = "UPDATE " . $this->table . "
                  SET tipo_usuario = :tipo_usuario,
                      nombre = :nombre,
                      email = :email,
                      telefono = :telefono,
                      direccion = :direccion,
                      oni = :oni,
                      dui = :dui,
                      estado = :estado
                  WHERE id = :id";
        
        $stmt = $this->conn->prepare($query);
        
        // Limpiar datos
        $this->tipo_usuario = htmlspecialchars(strip_tags($this->tipo_usuario ?? 'estudiante_mayor'));
        $this->nombre = htmlspecialchars(strip_tags($this->nombre));
        $this->email = htmlspecialchars(strip_tags($this->email ?? ''));
        $this->telefono = htmlspecialchars(strip_tags($this->telefono ?? ''));
        $this->direccion = htmlspecialchars(strip_tags($this->direccion ?? ''));
        $this->oni = htmlspecialchars(strip_tags($this->oni ?? null));
        $this->dui = htmlspecialchars(strip_tags($this->dui ?? null));
        $this->estado = htmlspecialchars(strip_tags($this->estado ?? 'activo'));
        $this->id = htmlspecialchars(strip_tags($this->id));
        
        // Bind
        $stmt->bindParam(":tipo_usuario", $this->tipo_usuario);
        $stmt->bindParam(":nombre", $this->nombre);
        $stmt->bindParam(":email", $this->email);
        $stmt->bindParam(":telefono", $this->telefono);
        $stmt->bindParam(":direccion", $this->direccion);
        $stmt->bindParam(":oni", $this->oni);
        $stmt->bindParam(":dui", $this->dui);
        $stmt->bindParam(":estado", $this->estado);
        $stmt->bindParam(":id", $this->id);
        
        if ($stmt->execute()) {
            return true;
        }
        return false;
    }
    
    // Eliminar usuario
    public function eliminar() {
        $query = "DELETE FROM " . $this->table . " WHERE id = ?";
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(1, $this->id);
        
        if ($stmt->execute()) {
            return true;
        }
        return false;
    }
    
    // Buscar por email
    public function buscarPorEmail($email) {
        $query = "SELECT * FROM " . $this->table . " WHERE email = ? LIMIT 1";
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(1, $email);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    // Contar usuarios
    public function contar() {
        $query = "SELECT COUNT(*) as total FROM " . $this->table;
        $stmt = $this->conn->prepare($query);
        $stmt->execute();
        $row = $stmt->fetch(PDO::FETCH_ASSOC);
        return $row['total'];
    }
}
?>
